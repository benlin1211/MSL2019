#include "stm32l476xx.h"
#include "cmsis_gcc.h"
#include "core_cm4.h"
#include "core_cmFunc.h"
#include "core_cmInstr.h"
#include "core_cmSimd.h"
#include "system_stm32l4xx.h"


#define IS_UART_TRANS_READY 1
#define IS_UART_TRANS_DONE 1
//#define MODIFY_REG (REG,SELECT,VAL) {((REG)=((REG)&(~(SELECT)))|(VAL));};


void GPIO_Init(void) {
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIOCEN);
// UART:PA9 & PA10
	//TM_GPIO_Init(GPIOA, 9, TM_GPIO_Mode_AF, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
	//Set PA9 as AF mode
	GPIOA->MODER=(GPIOA->MODER&0xFFF3FFFF)|(0b10<<18);
	GPIOA->OTYPER=GPIOA->OTYPER&0xFFFFFDFF|1<<9;
	GPIOA->PUPDR=GPIOA->PUPDR&0xFFF3FFFF;
	GPIOA->OSPEEDR=GPIOA->OSPEEDR&0xFFF3FFFF;
	//TM_GPIO_Init(GPIOA, 10, TM_GPIO_Mode_AF, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);



	GPIOB->AFR[0] = (GPIOB->AFR[0] & ~(0xFF000000)) | 0x77000000; // AF7 for pin
	//(0111 0111)000000
// BUTTON: PC13
	TM_GPIO_Init(GPIOC, 13, TM_GPIO_Mode_IN, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);
}

//PA9 & PA10 => USART1
void USART1_Init(void) {
/* Enable clock for USART1 */
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
// CR1 /* Receiver Enable & Transmitter Enable */
	MODIFY_REG(USART1->CR1, USART_CR1_M | USART_CR1_PS | USART_CR1_PCE | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8, USART_CR1_TE | USART_CR1_RE);
// CR2
	MODIFY_REG(USART1->CR2, USART_CR2_STOP, 0x0); // 1-bit stop
// CR3
	MODIFY_REG(USART1->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), 0x0); // none hwflowctl
// BRR
	MODIFY_REG(USART1->BRR, 0xFF, 4000000L/115200L);
	//clk rate = 4MHz (MSI)
	//USART1 Baud rate = 115200Hz
/*
In asynchronous mode, the following bits must be kept cleared:
- LINEN and CLKEN bits in the USART_CR2 register,
- SCEN, HDSEL and IREN bits in the USART_CR3 register.
*/
	USART1->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
	USART1->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);

// Finally, enable UART
	USART1->CR1 |= (USART_CR1_UE);
}



int UART_Transmit(uint8_t *arr, uint32_t size) {
//TODO: Send str to UART and return how many bytes are successfully transmitted.
	for (int i = 0; i < size; i++) {
		while (!IS_UART_TRANS_READY);//lock before trans
		USART1->TDR = arr[i];
	}
	while (!IS_UART_TRANS_DONE);//lock
	return 0;
}
void init_UART() {
// Initialize UART registers
	int a;
}

int main(void){
	GPIO_Init();
	USART1_Init();
	UART_Transmit((uint8_t*)"Hello", 5);
}
