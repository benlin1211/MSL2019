#include "stm32l476xx.h"
#include "cmsis_gcc.h"
#include "core_cm4.h"
#include "core_cmFunc.h"
#include "core_cmInstr.h"
#include "core_cmSimd.h"
#include "system_stm32l4xx.h"

#include <string.h>
#include <stdlib.h>

#define SET_REG(REG,SELECT,VAL) {((REG)=((REG)&(~(SELECT)))|(VAL));};


char cmd[100];
int len=0;
//ºñ±µ10¥Õ±µ9

void GPIO_Init(void) {
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIOCEN);
// UART:PA9 & PA10
	//TM_GPIO_Init(GPIOA, 9, TM_GPIO_Mode_AF, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
	GPIOA->MODER=(GPIOA->MODER&0xFFF3FFFF)|(0b10<<18);
	GPIOA->OTYPER=(GPIOA->OTYPER&0xFFFFFDFF)|0;
	GPIOA->PUPDR=GPIOA->PUPDR&0xFFF3FFFF;
	GPIOA->OSPEEDR=GPIOA->OSPEEDR&0xFFF3FFFF;
	//TM_GPIO_Init(GPIOA, 10, TM_GPIO_Mode_AF, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
	GPIOA->MODER=(GPIOA->MODER&0xFFCFFFFF)|(0b10<<20);
	GPIOA->OTYPER=(GPIOA->OTYPER&0xFFFFFBFF)|0;
	GPIOA->PUPDR=GPIOA->PUPDR&0xFFCFFFFF;
	GPIOA->OSPEEDR=GPIOA->OSPEEDR&0xFFCFFFFF;
	// AF7 for pin9&10
	GPIOA->AFR[1] = (GPIOA->AFR[1] & ~(0x00000FF0)) | 0x00000770;
	//(0111 0111)000000
// BUTTON: PC13
	//TM_GPIO_Init(GPIOC, 13, TM_GPIO_Mode_IN, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);
	GPIOC->MODER=(GPIOC->MODER&0xF3FFFFFF);
	GPIOC->OTYPER=(GPIOC->OTYPER&0xFFFFDFFF)|0;
	GPIOC->PUPDR=GPIOC->PUPDR&0xF3FFFFFF;
	GPIOC->OSPEEDR=(GPIOC->OSPEEDR&0xF3FFFFFF)|(0b01<<26);
}

//PA9 & PA10 => USART1
void USART1_Init(void) {
/* Enable clock for USART1 */
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
// CR1 /* Receiver Enable & Transmitter Enable */
	//MODIFY_REG(USART1->CR1, USART_CR1_M | USART_CR1_PS | USART_CR1_PCE | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8, USART_CR1_TE | USART_CR1_RE);
	SET_REG(USART1->CR1, USART_CR1_M, USART_CR1_M0);//00: 1 Start bit, 8+1 data bits, n stop bits
	SET_REG(USART1->CR1, USART_CR1_PS, 0);//0: Even parity
	SET_REG(USART1->CR1, USART_CR1_PCE, USART_CR1_PCE);//1: the computed parity is inserted at the MSB position(9th bit if M=1)
	SET_REG(USART1->CR1, USART_CR1_TE, 0);
	SET_REG(USART1->CR1, USART_CR1_RE, USART_CR1_RE);//1
	//recv interrupt enable bit
	SET_REG(USART1->CR1, USART_CR1_TXEIE, 0);//0
	SET_REG(USART1->CR1, USART_CR1_TCIE, 0);//0
	SET_REG(USART1->CR1, USART_CR1_RXNEIE, USART_CR1_RXNEIE);//1
	SET_REG(USART1->CR1, USART_CR1_OVER8, 0);//0: Oversampling by 16; 1: Oversampling by 8

// CR2
	//MODIFY_REG(USART1->CR2, USART_CR2_STOP, 0x0); // 1-bit stop
	SET_REG(USART1->CR2, USART_CR2_STOP, 0);//00: 1 stop bit

// CR3
	//MODIFY_REG(USART1->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), 0x0); // none hwflow control
	SET_REG(USART1->CR3, USART_CR3_RTSE, 0);//0
	SET_REG(USART1->CR3, USART_CR3_CTSE, 0);//0
	SET_REG(USART1->CR3, USART_CR3_ONEBIT, 0);//0
// BRR
	//MODIFY_REG(USART1->BRR, 0xFF, 4000000L/115200);
	SET_REG(USART1->BRR, 0xFF, 4000000/9600);//0
	//clk rate = 4MHz (MSI)

/*
In asynchronous mode, the following bits must be kept cleared:
- LINEN and CLKEN bits in the USART_CR2 register,
- SCEN, HDSEL and IREN bits in the USART_CR3 register.
*/
	USART1->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
	USART1->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);

// Finally, enable UART

	USART1->CR1 |= (USART_CR1_UE);
}

void EXTI_config()
{
	SET_REG(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN,RCC_APB2ENR_SYSCFGEN);
	SET_REG(SYSCFG->EXTICR[3],SYSCFG_EXTICR4_EXTI13,SYSCFG_EXTICR4_EXTI13_PC);
	//Interrupt mask(in IMR1)
	SET_REG(EXTI->IMR1,EXTI_IMR1_IM13,EXTI_IMR1_IM13);
	//trigger: rise edge(in FTSR1)
	SET_REG(EXTI->FTSR1,EXTI_FTSR1_FT13,EXTI_FTSR1_FT13);
}

void NVIC_config()
{
	NVIC_EnableIRQ(EXTI15_10_IRQn);
	NVIC_EnableIRQ(USART1_IRQn);
}



int UART_Transmit(uint8_t *arr, uint32_t size) {
//TODO: Send str to UART and return how many bytes are successfully transmitted.
	SET_REG(USART1->CR1, USART_CR1_TE, USART_CR1_TE);
	int i;
	while ( ( USART1->ISR & USART_ISR_TXE )== 0 );
	for (i = 0; i < size; i++) {
		USART1->TDR = arr[i];
		while ( ( USART1->ISR & USART_ISR_TXE )== 0 );
	}
	while ( ( USART1->ISR & USART_ISR_TC )== 0 );

	return i;
}


//automatic handler
void EXTI15_10_IRQHandler(void)
{

	if((EXTI->PR1 & EXTI_PR1_PIF13) == EXTI_PR1_PIF13)
	{
		unsigned char *s = "Hello Charlie. ";
		EXTI->PR1 = EXTI_PR1_PIF13;
		UART_Transmit( s, strlen(s));
		int a=0;
		while ( a<80000 ) a++;
	}
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);//clear pending
}

void USART1_IRQHandler(void){
	unsigned char c;
	int mode = 0;
	while(( USART1->ISR & USART_ISR_RXNE ) == USART_ISR_RXNE ){ //USART_CR1_RXNEIE?
		c = USART1->RDR;
	}
	if (len>=100){
		if(c == 8 ){ //backspace available
			if( len > 0 ){
				//UART_Transmit("\r" , 2);
				//UART_Transmit(cmd , len-1);
				// no need to refresh
				UART_Transmit(&c , 1);
				len--;
			}
		}
	}
	else if(c == 13){ //\n
		UART_Transmit("\r\n" ,4);
		len = 0;
		if( strcmp(cmd, "showid")== 0 ) mode = 1;
		else if( strcmp(cmd, "light")== 0 ) mode = 2;
		else if( strcmp(cmd, "led on")== 0 ) mode = 3;
		else if( strcmp(cmd, "led off")== 0 ) mode = 4;
		else mode = 5;
	}
	else if(c == 127 || c == 8){ //back delete
		if( len > 0 ){
			//UART_Transmit("\r" , 2);
			//UART_Transmit(cmd , len-1);
			// no need to refresh
			UART_Transmit(&c , 1);
			len--;
		}
	}
	else{
		UART_Transmit(&c , 1);
		cmd[len++] = c;
	}
	////////////////////////////////////////
	if (mode){
		if(mode == 1){
			mode = 0;
		}
		else if(mode == 2){
			mode = 0;
		}
		else if(mode == 3){
			mode = 0;
		}
		else if(mode == 4){
			mode = 0;
		}
		else if(mode == 5) {
			UART_Transmit( "Unknown Command", 15);
			UART_Transmit("\r\n" ,4);
			UART_Transmit(">" , 1);
		}
		mode = 0;
	}
	NVIC_ClearPendingIRQ(USART1_IRQn);
}


int main(void){
	GPIO_Init();
	EXTI_config();
	NVIC_config();
	USART1_Init();
	len = 0;
	int a = 0;
	while(a<5000) a++;
	UART_Transmit( ">", 1);
	while(1){
		//detect
	}
}
